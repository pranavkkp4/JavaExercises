/*
LabTwo2
Task: You will write the code for the insertsort method. The methods definition line is already provided you will need to fill in the internals
An insertionsort MUST be performed, no other sort method is allowed. 

An insertion sort is considered more efficient than .Sort as it will only affect items below the insertion point and values are added in their sorted order
from the very first value placed. An insertion sort only works on an array that is already in sorted order due to the approach from the highside of the array
highside is referring both to the highest index value AND actual values as a sorted array is in ascending order.
Assuming an array of {12,15,18,22}
Insert a newval of 19, you start at the high side of the array(lets call it 'i', 'i' is started at .size()-1 which is the last item.
 and as long as 1: newval < array.get(i) AND 2: i >= 0 to keep us inbounds of the array --- we keep going down in index of the array until 'i' places 
 us in a condition that breaks either rule 1 or 2 - when it does: insert at i+1
 If we use those rules for a newval of 19:
 i is initialized at .size() -1, 4-1 = 3
 is i >= 0? Yes is newval < array.get(i)? 19 < 22 YES keep going! Dont insert at this location, decrement i by 1 (i is 2 now)
 is i >= 0? Yes, is newval < array.get(i)? 19 < 18 NO!!! Break the loop, dont decrement 'i'
 insertion is performed after the loop finishes with 'i', insert at i + 1. 'i' is 2 when the loop broke, .add(i+1,newval)
 array will now be {12,15,18,19,22} 19 got inserted at 3(2+1) and pushed 22 down out of its way

Handin: You will upload this java file and a screenshot showing the output generated by main. Image and source are required for handin or its incomplete.

*/

import java.util.*;
import java.io.*;
public class LabTwo2 {
    public static void main(String args[]) {
      ArrayList<Integer> wordList= new ArrayList<Integer>();
      
      //Lets remove ALL copies of 26 from the ArrayList
      Scanner kbd = new Scanner(System.in);
      
      insertsort(wordList,4);
      insertsort(wordList,3);
      insertsort(wordList,2);
      insertsort(wordList,1);
      insertsort(wordList,0);
      printArrayList(wordList);
      
      
    }
    static void insertsort(ArrayList<Integer> array, int newval)
    {
        int i = array.size();//adding this statement so I can access i outside the for loop
        for(i = array.size()-1;i>=0;i--){
            if(newval > array.get(i)){
                break;
            }
        }
        array.add(i+1,newval);
           
        
    }
    static void printArrayList( ArrayList<Integer> array  )
    {
        for ( int number : array ) 
            System.out.println( number);
        System.out.println();
    }
}
